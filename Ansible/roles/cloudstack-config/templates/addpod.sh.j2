#!/bin/bash
################################################################################
# addpod.sh
# Populated by Ansible as part of deployvms.yml playbook.

################################################################################
# Vars / constants
DEPLOYLOG="/tmp/addpod-{{ env_name_clean }}.log";

################################################################################
# Write to log file + console
function WriteOutput()
{
  local LogTimestamp;
  LogTimestamp=`date +"%Y-%m-%d %H:%M:%S"`;
  echo -e "$*"
  echo ${LogTimestamp} "$*" >> ${DEPLOYLOG};
}

WriteOutput "Checking login.";
AccountCheck=`cloudmonkey list accounts name=admin | grep -i error`;
if [ -z ${AccountCheck} ];
then
  WriteOutput "Admin account found. Good to go.";
else
  WriteOutput "Unable to log in, please check CloudStack installation.";
  exit 1;
fi

WriteOutput "Checking if zone exists."
ZoneID=`cloudmonkey list zones name={{ existing_zone }}| jq '.zone[]|.id'`;
WriteOutput "$ZoneID"
if [ -n ${ZoneID} ];
then
  WriteOutput "Zone found. Good to go."
else
  WriteOutput "Zone not present, bailing out."
  exit 1
fi
 WriteOutput "Disabling CIDR check."
cloudmonkey update configuration name=check.pod.cidrs value=false | tee -i -a ${DEPLOYLOG};

NUMPODS=`cloudmonkey list pods|jq .count`
NEXTPOD=$((NUMPODS+1))
PODNAME="Pod$NEXTPOD-{{ env_name_clean }}"

WriteOutput "Adding ${PODNAME} to zone {{ existing_zone }} (ID ${ZoneID}).";
WriteOutput "Creating Pod.";
WriteOutput "Adding mgmt for physical hosts"
cloudmonkey create pod zoneid=${ZoneID} name="${PODNAME}" gateway="{{ env_podgw }}" netmask="{{ env_podmask }}" startip="{{ env_podstartip }}" endip="{{ env_podendip }}" | tee -i -a ${DEPLOYLOG};

PodID=`cloudmonkey list pods name="${PODNAME}" zoneid=${ZoneID} filter=id | jq '.pod[] | .id'`;

if [ "{{ env_zonetype | lower }}" == "basic" ]; then
  cloudmonkey create vlaniprange podid=${PodID} networkid=${NETIDBAS} gateway="{{ env_guestnetgw }}" netmask="{{ env_guestnetmask }}" startip="{{ env_guestnetstartip }}" endip="{{ env_guestnetendip }}" forvirtualnetwork=false zoneid=${ZoneID} | tee -i -a ${DEPLOYLOG};
fi
NEXTCLUSTER=1
if [ "{{ vmware_ver | lower }}" != "na" ];
then
    WriteOutput "Adding VMware cluster."
    {% if env_numversion | version_compare('4.2','>') %}
    cloudmonkey add cluster zoneid=${ZoneID} hypervisor='VMware' clustertype='ExternalManaged' podid=${PodID} url="http://{{ vcenter_ip }}/{{ vmware_datacenter_name }}/{{ env_zone_clustername }}" clustername="{{ env_zone_clustername }}" vsmipaddress="{{ vcenter_ip }}" vsmpassword='{{ vmware_vcsa_pass }}' vsmusername='{{ vmware_vcsa_user }}' | tee -i -a ${DEPLOYLOG};
    {% else %}
    cloudmonkey add cluster zoneid=${ZoneID} hypervisor='VMware' clustertype='ExternalManaged' podid=${PodID} url="http://{{ vcenter_ip }}/{{ vmware_datacenter_name }}/{{ env_zone_clustername }}" clustername="{{ env_zone_clustername }}" password='{{ vmware_vcsa_pass }}' username='{{ vmware_vcsa_user }}' | tee -i -a ${DEPLOYLOG};
    {% endif %}
    ClusterID_VMW=`cloudmonkey list clusters clustername="{{ env_zone_clustername }}" zoneid=${ZoneID} | jq '.cluster[] | .id'`;
    NEXTCLUSTER=$((NEXTCLUSTER+1))
fi
if  [ "{{ xs_ver | lower }}" != "na" ];
then
  WriteOutput "Adding XenServer cluster.";
  ClusterID_XS=`cloudmonkey add cluster zoneid=${ZoneID} hypervisor='XenServer' clustertype='CloudManaged' podid=${PodID} clustername="$PODNAME-c$NEXTCLUSTER"  | jq '.cluster[] | .id'`;
  WriteOutput "Adding XenServer hosts.";
  if [ "{{ env_zone_addhosts }}" == "true" ];
  then
    cloudmonkey add host zoneid=${ZoneID} podid=${PodID} clusterid=${ClusterID_XS} hypervisor=XenServer password="{{ xs_password }}" username="{{ xs_username }}" url="http://{% if groups['xenserver_hosts'] | length | int > 0 %}{{ hostvars[groups['xenserver_hosts'][0]]['ansible_ssh_host'] }}{% else %}UNDEFINED{% endif %}" | tee -i -a ${DEPLOYLOG};
    NEXTCLUSTER=$((NEXTCLUSTER+1))
  fi
fi
if  [ "{{ kvm_os | lower }}" != "na" ];
then
  WriteOutput "Adding KVM cluster."
  ClusterID_KVM=`cloudmonkey add cluster zoneid=${ZoneID} hypervisor='KVM' clustertype='CloudManaged' podid=${PodID} clustername="$PODNAME-c$NEXTCLUSTER"  | jq '.cluster[] | .id'`;
  if [ "{{ env_zone_addhosts }}" == "true" ];
  then
    WriteOutput "Adding KVM hosts."
    {% for host in groups[ 'kvm_hosts'] %}
    WriteOutput "Adding KVM host {{ host }}.";
    cloudmonkey add host zoneid=${ZoneID} podid=${PodID} clusterid=${ClusterID_KVM} hypervisor='KVM' password="{{ kvm_password }}" username="{{ kvm_username }}" url="http://{{ hostvars[host]['ansible_ssh_host'] }}" | tee -i -a ${DEPLOYLOG};
    {% endfor %}
  fi
fi

  HOST_STATES="DOWN"
  while [[ "$HOST_STATES" == "DOWN" ]]; do
    HOST_CHECK=`cloudmonkey list hosts type=routing zoneid=${ZoneID} | grep '"state":' | grep -i 'alert|disconnected|connecting|down'`
    if [[ -z $HOST_CHECK ]];
    then
      HOST_STATES="ALL UP";
    else
      WriteOutput "Not all hosts reported Up. Checking again in 10 seconds.";
      sleep 10;
    fi
  done
WriteOutput "All hosts reported Up. Continuing";


{% if use_shared_storage %}
WriteOutput "Adding Primary Storage pools.";
{% for pool in env_pripools %}
WriteOutput "Adding Primary Storage pool {{ pool }}.";
{% if ('-esxi-pri' in pool) and (env_priprot | lower == "nfs" ) %}
cloudmonkey create storagepool zoneid=${ZoneID} podid=${PodID} clusterid=${ClusterID_VMW} name='{{ pool }}' scope='cluster' url="{{ env_priprot }}://{% if groups['primary_storage_hosts'] | length | int > 0 %}{{ hostvars[groups['primary_storage_hosts'][0]]['ansible_ssh_host'] }}{% else %}UNDEFINED{% endif %}{{ env_pripath }}{{ env_name_clean }}/{{ pool }}" | tee -i -a ${DEPLOYLOG};
{% elif ('-esxi-pri' in pool) and (env_priprot | lower == "iscsi" ) %}
cloudmonkey create storagepool zoneid=${ZoneID} podid=${PodID} clusterid=${ClusterID_VMW} name='{{ pool }}' scope='cluster' provider='DefaultPrimary' url="vmfs://dummy/{{ vmware_datacenter_name }}/{{ pool }}" | tee -i -a ${DEPLOYLOG};
{% elif ('-xs-pri' in pool) and (env_priprot | lower == "nfs" ) %}
cloudmonkey create storagepool zoneid=${ZoneID} podid=${PodID} clusterid=${ClusterID_XS} name='{{ pool }}' scope='cluster' url="{{ env_priprot }}://{% if groups['primary_storage_hosts'] | length | int > 0 %}{{ hostvars[groups['primary_storage_hosts'][0]]['ansible_ssh_host'] }}{% else %}UNDEFINED{% endif %}{{ env_pripath }}{{ env_name_clean }}/{{ pool }}" | tee -i -a ${DEPLOYLOG};
{% elif ('-xs-pri' in pool) and (env_priprot | lower == "iscsi" ) %}
cloudmonkey create storagepool zoneid=${ZoneID} podid=${PodID} clusterid=${ClusterID_XS} name='{{ pool }}' scope='cluster' provider='DefaultPrimary' url="{{ env_priprot }}://{% if groups['primary_storage_hosts_iscsi'] | length | int > 0 %}{{ hostvars[groups['primary_storage_hosts_iscsi'][0]]['ansible_ssh_host'] }}{% else %}UNDEFINED{% endif %}/{{ env_iscsi_target }}:{{ env_uuid }}/{{ loop.index0 }}" | tee -i -a ${DEPLOYLOG};
{% elif '-kvm-pri' in pool %}
cloudmonkey create storagepool zoneid=${ZoneID} podid=${PodID} clusterid=${ClusterID_KVM} name='{{ pool }}' scope='cluster' url="{{ env_priprot }}://{% if groups['primary_storage_hosts'] | length | int > 0 %}{{ hostvars[groups['primary_storage_hosts'][0]]['ansible_ssh_host'] }}{% else %}UNDEFINED{% endif %}{{ env_pripath }}{{ env_name_clean }}/{{ pool }}" | tee -i -a ${DEPLOYLOG};
{% endif %}
{% endfor %}
{% endif %}

WriteOutput "You're done. Good luck!";
