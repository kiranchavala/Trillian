#!/bin/bash

#Copyright 2016 ShapeBlue
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.


MARVINDIR="/marvin"
LOGDIR="/marvin/MarvinLogs"
JSON_OUTPUT_DIR="/marvin/json_results"
mkdir $JSON_OUTPUT_DIR

CFG_FILE="{{ env_name_clean }}-advanced-cfg"
{% raw %}
TEST_DATA_FILE="$MARVINDIR/test_data.py"
EXTRA_ENV_DATA_FILE="$MARVINDIR/additional_test_data.json"
TMP_ENV_META_DATA="$JSON_OUTPUT_DIR/additional_test_data.json"
ENV_TEST_DATA="env_test_data.json"
ENV_EXTRA_DATA="env_extra_data.json"
ENCODED_TEST_DATA="$MARVINDIR/encoded_test_data.json"

echo " -- Create testrun uuid if not already created"
if [[ -e "/marvin/testuuid" ]]; then
  TESTRUN_UUID=`cat /marvin/testuuid`
else
  TESTRUN_UUID=$(uuidgen -r)
  echo $TESTRUN_UUID > $MARVINDIR/testuuid
fi

if [[ -e "$MARVINDIR/testrunstartdate" ]]; then
  DATEVAR=$(cat "$MARVINDIR/testrunstartdate")
else
  DATEVAR=$(date --iso-8601=minutes)
fi


echo " ==== PROCESS ENV DEFINITION FILE (ADVANCED-CFG) ==== "

cd $MARVINDIR
echo " -- convert numbers to strings env cfg data"
cp $CFG_FILE $JSON_OUTPUT_DIR/env_cfg_file.json
NUMBERS=(`grep '\".*\": [0-9].*' $JSON_OUTPUT_DIR/env_cfg_file.json | sed 's/.*: //g' | sed 's/,//g'`)
UNIQUE=(`for i in ${NUMBERS[@]}; do echo $i; done | sort -u | tr " " "\n"`)
for (( i = 0; i < ${#UNIQUE[@]}; i++ )); do
  sed -i "s/: ${UNIQUE[$i]}$/: \"${UNIQUE[$i]}\"/g" $JSON_OUTPUT_DIR/env_cfg_file.json
  sed -i "s/: ${UNIQUE[$i]},/: \"${UNIQUE[$i]}\",/g" $JSON_OUTPUT_DIR/env_cfg_file.json
done

echo " -- get host login data from env cfg data"
cloudmonkey set display json
export TERM=vt100
HV=$(cloudmonkey list hosts | jq -r '.host[] | .hypervisor //empty' | head -1)
HV_JSON=`cat $EXTRA_ENV_DATA_FILE | jq -r '. | .marvin_hypervisor'`

if [[ "${HV,,}" == "kvm" ]]; then
  HOST1DATA=`cat $JSON_OUTPUT_DIR/env_cfg_file.json | jq '.zones[] | .pods[] | .clusters[]| select(.hypervisor=="kvm") | .hosts[0]'`
  echo "HOST1DATA is " $HOST1DATA
  HOST1ADDR=`echo $HOST1DATA | jq -r '.url' | sed 's/http:\/\///g'`
  HOST1USER=`echo $HOST1DATA | jq -r '.username'`
  HOST1PASS=`echo $HOST1DATA | jq -r '.password'`
fi

echo " -- Redact sensitive data from env cfg data"
sed -i 's/\"password\": \".*\"/\"password\": \"------"/g' $JSON_OUTPUT_DIR/env_cfg_file.json
sed -i 's/\"passwd\": \".*\"/\"passwd\": \"------"/g' $JSON_OUTPUT_DIR/env_cfg_file.json
sed -i 's/\"username\": \".*\"/\"username\": \"------"/g' $JSON_OUTPUT_DIR/env_cfg_file.json
sed -i 's/\"mgtSvrIp\": \".*\"/\"mgtSvrIp\": \"------"/g' $JSON_OUTPUT_DIR/env_cfg_file.json
sed -i 's/\"user\": \".*\"/\"user\": \"------"/g' $JSON_OUTPUT_DIR/env_cfg_file.json


echo " -- get additional data for env cfg data"

cp $EXTRA_ENV_DATA_FILE $TMP_ENV_META_DATA
cloudmonkey set display json
export TERM=vt100
if [[ "${HV,,}" == "kvm" ]]; then
  HOSTYPEDATA=`sshpass -p "$HOST1PASS" ssh -o StrictHostKeyChecking=no $HOST1USER@$HOST1ADDR "cat /etc/*-release"`
  echo HOSTYPEDATA $HOSTYPEDATA
  if [[ -n `echo $HOSTYPEDATA | grep 'CentOS release 6'` ]]; then
    sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"CentOS 6\"/g" $TMP_ENV_META_DATA
  elif [[ -n `echo $HOSTYPEDATA | grep 'CentOS Linux release 7'` ]]; then
    sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"CentOS 7\"/g" $TMP_ENV_META_DATA
  elif [[ -n `echo $HOSTYPEDATA | grep 'CentOS Linux release 8'` ]]; then
    sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"CentOS 8\"/g" $TMP_ENV_META_DATA
  elif [[ -n `echo $HOSTYPEDATA | grep 'Ubuntu 16.04'` ]]; then
    sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"Ubuntu 16.04\"/g" $TMP_ENV_META_DATA
  elif [[ -n `echo $HOSTYPEDATA | grep 'Ubuntu 14.04'` ]]; then
    sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"Ubuntu 14.04\"/g" $TMP_ENV_META_DATA
  elif [[ -n `echo $HOSTYPEDATA | grep 'Ubuntu 18.04'` ]]; then
    sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"Ubuntu 18.04\"/g" $TMP_ENV_META_DATA
  elif [[ -n `echo $HOSTYPEDATA | grep 'Ubuntu 20.04'` ]]; then
    sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"Ubuntu 20.04\"/g" $TMP_ENV_META_DATA
  else
    sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"Unknown\"/g" $TMP_ENV_META_DATA
  fi
else
  HV_VER=$(cloudmonkey list hosts | jq -r '.host[] | .hypervisorversion //empty' | head -1)
  sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"$HV_VER\"/g" $TMP_ENV_META_DATA
fi

echo " -- Add date and testrun_uuid to additional test run data"
sed -i "s/\"testrun_date\": \".*\"/\"testrun_date\": \"$DATEVAR\"/g" $TMP_ENV_META_DATA
sed -i "s/\"testrun_uuid\": \".*\"/\"testrun_uuid\": \"$TESTRUN_UUID\"/g" $TMP_ENV_META_DATA


if [[ -e "/marvin/rc_num" ]]; then
  sed -i "s/\"rc_num\": \".*\"/\"rc_num\": \"`cat /$MARVINDIR/rc_num`\"/g" $TMP_ENV_META_DATA
fi

if [[ -e "/marvin/pr_id" ]]; then
  sed -i "s/\"pr_id\": \".*\"/\"pr_id\": \"`cat /$MARVINDIR/pr_id`\"/g" $TMP_ENV_META_DATA
fi

echo " -- URL Encode test_data"
TEST_DATA=`cat $TEST_DATA_FILE`
ENCODED_DATA=`python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1])" "$TEST_DATA"`
echo "{\"encoded_test_py_data\":\"$ENCODED_DATA\"}" > $ENCODED_TEST_DATA

echo " ===== create json results files ======"

for file in $LOGDIR/test_*.py.json; do
  echo " --- Processing $file"
  for thetest in `cat $file | jq -r '.results[]|.name'` ; do
    echo " -- Splitting out $thetest"
    cat $file | jq --arg JQVAR $thetest '.results[]|select(.name==$JQVAR)' > $JSON_OUTPUT_DIR/$thetest-tmp.json
    echo "{ \"results\": `jq -s '.[0] + .[1] + .[2] +.[3]' $JSON_OUTPUT_DIR/$thetest-tmp.json $TMP_ENV_META_DATA $JSON_OUTPUT_DIR/env_cfg_file.json $ENCODED_TEST_DATA` }" > $JSON_OUTPUT_DIR/$thetest.json
    rm -f $JSON_OUTPUT_DIR/$thetest-tmp.json
  done
done


{% endraw %}
cd $MARVINDIR && tar -czf ./{{ env_name_clean }}_json.tar.gz $JSON_OUTPUT_DIR/*

